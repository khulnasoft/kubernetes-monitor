lint:
  machine:
    docker_layer_caching: true
    image: ubuntu-2004:202111-01
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        command: |
          npm run lint
        name: lint
    - run:
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        name: Notify Slack on failure
        when: on_fail
  working_directory: ~/kubernetes-monitor
code_formatter:
  machine:
    docker_layer_caching: true
    image: ubuntu-2004:202111-01
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        command: |
          npm run format:check
        name: code formatter check
    - run:
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        name: Notify Slack on failure
        when: on_fail
  working_directory: ~/kubernetes-monitor
unit_tests:
  machine:
    image: ubuntu-2004:202111-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - khulnasoft/scan:
        additional-arguments: --all-projects --exclude=test
        fail-on-issues: true
        severity-threshold: high
        monitor-on-build: false
        token-variable: KHULNASOFT_TOKEN
    - khulnasoft/scan:
        command: code test
        fail-on-issues: true
        severity-threshold: high
        monitor-on-build: false
        token-variable: KHULNASOFT_TOKEN
    - run:
        name: Unit tests
        command: |
          npm run build &&
          npm run test:unit
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail

system_tests:
  machine:
    image: ubuntu-2204:2022.04.1
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        name: Install Skopeo
        command: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -qq
          sudo apt-get install skopeo
    - run:
        name: System tests
        command: |
          npm run build &&
          npm run test:system
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail

integration_tests:
  resource_class: large
  machine:
    image: ubuntu-2004:202111-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        name: create temp dir for logs
        command: mkdir -p /tmp/logs/test/integration/kind
    - run:
        name: Integration tests
        command: |
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          npm run test:integration:kind:yaml
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/kind

integration_tests_helm:
  resource_class: large
  machine:
    image: ubuntu-2004:202111-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        name: Create temporary directory for logs
        command: mkdir -p /tmp/logs/test/integration/kind-helm
    - run:
        name: Integration tests with Helm deployment
        command: |
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          npm run test:integration:kind:helm
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/kind-helm

integration_tests_proxy:
  resource_class: large
  machine:
    image: ubuntu-2004:202111-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        name: Create temporary directory for logs
        command: mkdir -p /tmp/logs/test/integration/proxy
    - run:
        name: Integration tests with proxy
        command: |
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          npm run test:integration:kind:proxy
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/proxy

eks_integration_tests:
  resource_class: large
  machine:
    image: ubuntu-2004:202111-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - install_python_requests
    - setup_node16
    - aws-cli/install:
        override-installed: true
    - run:
        name: Create temp dir for logs
        command: mkdir -p /tmp/logs/test/integration/eks
    - run:
        name: Integration tests EKS
        command: |
          npm ci &&
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:eks:yaml
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/eks

aks_integration_tests:
  resource_class: large
  machine:
    image: ubuntu-2004:202111-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - azure-cli/install
    - run:
        name: Create temp dir for logs
        command: mkdir -p /tmp/logs/test/integration/aks
    - run:
        name: Integration tests AKS
        command: |
          npm ci &&
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:aks:yaml
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/aks

######################## MERGE TO STAGING ########################
tag_and_push:
  docker:
    - image: cimg/node:16.13
      auth:
        username: $DOCKERHUB_USER
        password: $DOCKERHUB_PASSWORD
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_remote_docker
    - install_python_requests
    - run:
        name: Tag and push
        command: |
          npm ci &&
          docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
          unset CIRCLE_PULL_REQUEST &&
          unset CI_PULL_REQUEST &&
          unset CI_PULL_REQUESTS &&
          unset CIRCLE_PULL_REQUESTS &&
          npx semantic-release@17.2.2 &&
          NEW_VERSION=`cat ./package.json | jq -r '.version'` &&
          ./scripts/docker/approve-image.sh $NEW_VERSION
    - run:
        name: Notify Slack on failure
        command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail

######################## MERGE TO MASTER ########################
publish:
  docker:
    - image: cimg/node:16.13
      auth:
        username: $DOCKERHUB_USER
        password: $DOCKERHUB_PASSWORD
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_remote_docker
    - install_python_requests
    - install_helm
    - run:
        name: Export environment variables
        command: |
          LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`
          LATEST_TAG=${LATEST_TAG_WITH_V:1}
          IMAGE_NAME_APPROVED=khulnasoft/kubernetes-monitor:${LATEST_TAG}-approved
          IMAGE_NAME_PUBLISHED=khulnasoft/kubernetes-monitor:${LATEST_TAG}
          IMAGE_NAME_APPROVED_UBI9=khulnasoft/kubernetes-monitor:${LATEST_TAG}-ubi9-approved
          IMAGE_NAME_PUBLISHED_UBI9=khulnasoft/kubernetes-monitor:${LATEST_TAG}-ubi9
          echo "export LATEST_TAG=${LATEST_TAG}" >> $BASH_ENV
          echo "export IMAGE_NAME_APPROVED=${IMAGE_NAME_APPROVED}" >> $BASH_ENV
          echo "export IMAGE_NAME_PUBLISHED=${IMAGE_NAME_PUBLISHED}" >> $BASH_ENV
          echo "export IMAGE_NAME_APPROVED_UBI9=${IMAGE_NAME_APPROVED_UBI9}" >> $BASH_ENV
          echo "export IMAGE_NAME_PUBLISHED_UBI9=${IMAGE_NAME_PUBLISHED_UBI9}" >> $BASH_ENV
    - khulnasoft/scan:
          additional-arguments: --all-projects --exclude=test
          fail-on-issues: true
          severity-threshold: high
          monitor-on-build: true
          token-variable: KHULNASOFT_TOKEN
    - khulnasoft/scan:
          command: code test
          fail-on-issues: true
          severity-threshold: high
          monitor-on-build: true
          token-variable: KHULNASOFT_TOKEN
    - khulnasoft/scan:
        command: container test
        docker-image-name: ${IMAGE_NAME_APPROVED}
        fail-on-issues: true
        severity-threshold: high
        target-file: Dockerfile
        monitor-on-build: true
        additional-arguments: --project-name=alpine --policy-path=.khulnasoft
        token-variable: KHULNASOFT_TOKEN
    - khulnasoft/scan:
        command: container test
        docker-image-name: ${IMAGE_NAME_APPROVED_UBI9}
        fail-on-issues: true
        severity-threshold: critical
        target-file: Dockerfile.ubi9
        monitor-on-build: true
        additional-arguments: --project-name=ubi9 --policy-path=.khulnasoft
        token-variable: KHULNASOFT_TOKEN
    - run:
        name: Publish
        command: |
          docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
          docker pull ${IMAGE_NAME_APPROVED} &&
          docker tag ${IMAGE_NAME_APPROVED} ${IMAGE_NAME_PUBLISHED} &&
          docker push ${IMAGE_NAME_PUBLISHED} &&
          docker pull ${IMAGE_NAME_APPROVED_UBI9} &&
          docker tag ${IMAGE_NAME_APPROVED_UBI9} ${IMAGE_NAME_PUBLISHED_UBI9} &&
          docker push ${IMAGE_NAME_PUBLISHED_UBI9} &&
          ./scripts/slack/notify_push.py ${IMAGE_NAME_PUBLISHED} &&
          ./scripts/slack/notify_push.py ${IMAGE_NAME_PUBLISHED_UBI9} &&
          ./scripts/publish-gh-pages.sh ${LATEST_TAG}
    - run:
        name: Download operator-sdk
        command: |
          RELEASE_VERSION=v0.15.1
          DOWNLOAD_LOCATION=./operator-sdk
          CURL_FOLLOW_REDIRECTS="-L"
          curl ${CURL_FOLLOW_REDIRECTS} https://github.com/operator-framework/operator-sdk/releases/download/${RELEASE_VERSION}/operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu -o ${DOWNLOAD_LOCATION}
          chmod +x ${DOWNLOAD_LOCATION}
    - run:
        name: Create Operator and push Operator image to DockerHub
        command: |
          export OPERATOR_TAG="${LATEST_TAG}"
          export MONITOR_TAG="${LATEST_TAG}-ubi9"
          python3 scripts/operator/create_operator_and_push.py "${OPERATOR_TAG}" "${MONITOR_TAG}" "${DOCKERHUB_USER}" "${DOCKERHUB_PASSWORD}"
          echo "export OPERATOR_TAG=${OPERATOR_TAG}" >> $BASH_ENV
    - khulnasoft/scan:
        docker-image-name: khulnasoft/kubernetes-operator:${OPERATOR_TAG}
        severity-threshold: critical
        target-file: khulnasoft-operator/build/Dockerfile
        monitor-on-build: true
    - run:
        name: Notify Slack on failure
        command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail